
---

- name: check if the user emusr is present & display the output in debug task
  sudo_user: emusr
  raw: id emusr 
  register: user
  ignore_errors: true

- debug: msg="{{ user.stdout }}"

- name: Executing the block to send mail  alerts if emusr is not present in server
  sudo_user: emusr
  block:
     - name: Send email notification if emusr doesn't exist
       local_action: mail
                     to="sreenu@synopsys.com"
                     from="sreenu@synopsys.com"
                     subject="Kafka installation notification"
                     body="emusr not  exist in {{ ansible_nodename }}"
       delegate_to: localhost
       when: user.rc >= 1

     - name: end the playbook if emusr doesn't exist
       sudo_user: emusr
       meta: end_play
       when: user.rc >= 1

#- name: Registering the variable to check deployment path for kafka
#  sudo_user: emusr
#  stat:
#    path: /opt/ems/kafka
#  register: stat_result

- name: Create kafka directory -> /opt/ems/kafka if not present
  sudo_user: emusr 
  file: path=/opt/ems/kafka  state=directory
#  when: stat_result.stat.exists == False  

#- name: Registering variable and check kafka tar file whether it is exist or not
#  sudo_user: emusr
#  stat:
#   path: /opt/ems/kafka/{{kafka_version}}.tgz
#  register: stat_result1

- name: Deploying kafka tar file in /etc/ems/kafka/ directory
  sudo_user: emusr
  copy: src={{kafka_version}}.tgz  dest=/opt/ems/kafka mode=755 owner=emusr group=synopsys
#  when: stat_result1.stat.exists == False

- name: Registering the variable to check whether the kafka tar file is unarchive or not
  sudo_user: emusr
  stat:
    path: /opt/ems/kafka/{{kafka_version}}
  register: stat_result2
  ignore_errors: true

- name: Untar the file if it is not untar already
  sudo_user: emusr
  unarchive: src=/opt/ems/kafka/{{kafka_version}}.tgz  dest=/opt/ems/kafka owner=emusr
  when: stat_result2.stat.exists == False

- name: Change kafka deploy directory permissions and ownership after untar the file
  sudo_user: emusr
  file:
    path: /opt/ems/kafka/{{kafka_version}}
    mode: 0755
    owner: emusr
    group: synopsys
    recurse: yes

- name: Deploying config files in kafka config directory
  sudo_user: emusr
  template: src={{ item }}.j2  dest=/opt/ems/kafka/{{kafka_version}}/config/{{ item }}
  with_items: 
         - zookeeper.properties      
         - server.properties
         - producer.properties
         - consumer.properties
    
#- name: Deploying server.properties file into kafka  config directory
#  sudo_user: emusr
#  template: src=server.properties.j2  dest=/opt/ems/kafka/{{kafka_version}}/config/server.properties

#- name: Deploying Producer.properties file into kafka  config directory
#  sudo_user: emusr
#  template: src=producer.properties.j2  dest=/opt/ems/kafka/{{kafka_version}}/config/producer.properties

#- name: Deploying consumer.properties file into kafka  config directory
#  sudo_user: emusr
#  template: src=consumer.properties.j2  dest=/opt/ems/kafka/{{kafka_version}}/config/consumer.properties

- name: Creating /SCRATCH/kafka/kafka-logs if not present
  file: path=/SCRATCH/kafka/kafka-logs state=directory  owner=emusr  group=synopsys  mode=0755

#- name: Check if the sym link 'current' is present in kafka deploy directory 
#  sudo_user: emusr
#  stat: path=/opt/ems/kafka/current
#  register: links

- name: Create symbolic link current in kafka deploy directory if not present
  sudo_user: emusr
  file: 
    src: /opt/ems/kafka/{{kafka_version}}
    dest: /opt/ems/kafka/current
    state: link
    owner: emusr
    group: synopsys
    mode: 0755
#  when: links.stat.exists == False

#- name: Register variable to check whether the directory name zookepper is exist or not in kafka deploy directory 
#  sudo_user: emusr
#  stat: path=/opt/ems/kafka/{{kafka_version}}/zookeeper
#  register: check_zkdir

- name: Create 'zookeeper' dir under deploy path
  sudo_user: emusr
  file: path=/opt/ems/kafka/{{kafka_version}}/zookeeper  state=directory  owner=emusr group=synopsys mode=0755
#  when: check_zkdir.stat.exists == False

- name: Deploying myid file into zookeeper directory
  sudo_user: emusr
  template: src=myid.j2  dest=/opt/ems/kafka/{{kafka_version}}/zookeeper/myid

- name: Modifying heap memory for kafka 
  sudo_user: emusr
  replace: dest=/opt/ems/kafka/{{kafka_version}}/bin/kafka-server-start.sh regexp='export KAFKA_HEAP_OPTS="-Xmx1G -Xms1G"'  replace='export KAFKA_HEAP_OPTS="-Xmx256M -Xms128M"'
  ignore_errors: true

- name: Deploying kafka service file into /etc/init.d directory to run kafka service
  copy: src=kafka   dest=/etc/init.d  owner=root   mode=0777

- name: Deploying zookeeper service file into /etc/init.d directory to run zookeeper service
  copy: src=zookeeper dest=/etc/init.d   owner=root mode=0777

- name: Stop kafka service
  service: name=kafka  state=stopped enabled=yes

- name: Stop zookeeper service
  service: name=zookeeper  state=stopped enabled=yes

- name: Start zookeeper service
  service: name=zookeeper  state=started enabled=yes

- name: Start kafka service
  sudo_user: emusr
  service: name=kafka  state=started  enabled=yes

- name: Registering variable to store zookeeper service status  for email notification
  sudo_user: emusr
  raw: service zookeeper status
  register: zk_start
  ignore_errors: true

- debug: msg="{{ zk_start.stdout }}"

- name: Registering variable to store kafka service status  for email notification
  sudo_user: emusr
  raw: service kafka status
  register: kf_start
  ignore_errors: true

- debug: msg="{{ kf_start.stdout }}"

- name: Executing the block to send email notification
  sudo_user: emusr
  block:
     - name: Send an email with kafka deployment status
       local_action: mail
                     to="sreenu@synopsys.com"
                     from="sreenu@synopsys.com"
                     subject="Kafka Deployment Success notification"
                     body="kafka deployment successfully done in {{ ansible_nodename }}"
       delegate_to: localhost
  when: zk_start.stdout == "zookeeper is running\r\n" or zk_start.stdout == "zookeeper is running\n" and  (kf_start.stdout == "kafka is running\r\n" or kf_start.stdout == "kafka is running\n") 
  ignore_errors: true
  
- name: Executing the block to send email notification
  sudo_user: emusr
  block:
     - name: Send an email with kafka deployment status if not done successfully
       local_action: mail
                     to="sreenu@synopsys.com"
                     from="sreenu@synopsys.com"
                     subject="Kafka Deployment Success notification"
                     body="kafka deployment not successfully done in {{ ansible_nodename }}"
       delegate_to: localhost
  when: zk_start.stdout == "zookeeper is not running\r\n" or zk_start.stdout == "zookeeper is not running\n" and  (kf_start.stdout == "kafka is not running\r\n" or kf_start.stdout == "kafka is not running\n")
  ignore_errors: true

